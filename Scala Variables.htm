<!doctype html> 
<head>
<meta charset="utf-8">
<title>Scala Variables</title>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<base href="http://www.tutorialspoint.com" />
<link rel="stylesheet" type="text/css" href="/scripts/print.css" />
<link rel="stylesheet" type="text/css" href="/scripts/prettify.css" />
<script type="text/javascript" src="/scripts/prettify.js"></script>
</head>
<body onload="prettyPrint()">
<div id="print-wrapper">
   <div id="print-area-wrapper">
      <div class="clearfix" id="actual-print-area">
             <h1 class="title">Scala Variables</h1>
             <a href="http://www.tutorialspoint.com/scala/scala_variables.htm" id="print-source">http://www.tutorialspoint.com/scala/scala_variables.htm</a><div id="page-print-copy">Copyright &copy; tutorialspoint.com</div>
             <div style="clear:both"></div>
             <br>
	     <div id="page-content">
<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>
<p>Based on the data type of a variable, the compiler allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.</p>
<h2>Variable Declaration</h2>
<p>Scala has the different syntax for the declaration of variables and they can be defined as value ie. constant or a variable. Following is the syntax to define a variable using <b>var</b> keyword:</p>
<pre class="prettyprint">
var myVar : String = "Foo"
</pre>
<p>Here myVar is declared using the keyword var. This means that it is a variable that can change value and this is called mutable variable. Following is the syntax to define a variable using <b>val</b> keyword:</p>
<pre class="prettyprint">
val myVal : String = "Foo"
</pre>
<p>Here myVal is declared using the keyword val. This means that it is a variable that can not be changed and this is called immutable variable.</p>
<h2>Variable Data Types:</h2>
<p>The type of a variable is specified after the variable name, and before equal sign. You can define any type of Scala variable by mentioning its data type as follows:</p>
<pre class="prettyprint">
val or val VariableName : DataType [=  Initial Value]
</pre>
<p>If you do not assign any initial value to a variable then it is valid as follows:</p>
<pre class="prettyprint">
var myVar :Int;
val myVal :String;
</pre>
<h2>Variable Type Inference:</h2>
<p>When you assign an initial value to a variable, the Scala compiler can figure out the type of the varible based on the value assigned to it. This is called variable type inference. Therefore, you could write these variable declarations like this:</p>
<pre class="prettyprint">
var myVar = 10;
val myVal = "Hello, Scala!";
</pre>
<p>Here by default myVar will be Int type and myVal will become String type variable.</p>
<h2>Multiple assignments:</h2>
<p>Scala supports multiple assignment. If a code block or method returns a Tuple, the Tuple can be assigned to a val variable. [ Note: We will study Tuble in subsequent chapters.]</p>
<pre class="prettyprint">
val (myVar1: Int, myVar2: String) = Pair(40, "Foo")
</pre>
<p>And the type inferencer gets it right:</p>
<pre class="prettyprint">
val (myVar1, myVar2) = Pair(40, "Foo")
</pre>
<h2>Variable Types:</h2>
<p>Variables in Scala can have three different scopes depending on the place where they are being used. They can exist as <b>fields</b>, as <b>method parameters</b> and as <b>local variables</b>. Below is the detail about each type of scope:</p>
<h3>Fields:</h3>
<p>Fields are variables that belong to an object. The fields are accessible from inside every method in the object. Fields can also be accessible outside the object depending on what access modifiers the field is declared with. Object fields can be both mutable or immutable types and can be defined using either var or val.</p>
<h3>Method Parameters:</h3>
<p>Method parameters are variables which are used to pass the value inside a method when the method is called. Method parameters are only accessible from inside the method  but the objects passed in may be accessible from the outside, if you have a reference to the object from outside the method. Method parameters are always mutable and defined by val keyword.</p>
<h3>Local Variables:</h3>
<p>Local variables are variables declared inside a method. Local variables are only accessible from inside the method, but the objects you create may escape the method if you return them from the method. Local variables can be both mutable or immutable types and can be defined using either var or val.</p>
         </div>
      </div>
   </div>
</div>
</body>
</html>
